package com.futsch1.medtimer;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

import android.graphics.Color;

import com.futsch1.medtimer.database.JSONBackup;
import com.futsch1.medtimer.database.Medicine;
import com.futsch1.medtimer.database.MedicineWithReminders;
import com.futsch1.medtimer.database.Reminder;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.robolectric.RobolectricTestRunner;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

@RunWith(RobolectricTestRunner.class)
public class JSONBackupUnitTest {

    // Generated by CodiumAI

    // creates a backup object with a version number and a medicines array
    @Test
    public void test_creates_backup_with_version_and_medicines_array() {
        JSONBackup jsonBackup = new JSONBackup();
        List<MedicineWithReminders> medicinesWithReminders = new ArrayList<>();
        MedicineWithReminders medicineWithReminders = new MedicineWithReminders();
        Reminder reminder = new Reminder(0);
        reminder.timeInMinutes = 60;
        reminder.amount = "1";
        reminder.daysBetweenReminders = 1;
        reminder.instructions = "Take with water";
        medicineWithReminders.reminders = Collections.singletonList(reminder);
        medicineWithReminders.medicine = new Medicine("Medicine A");
        medicineWithReminders.medicine.useColor = true;
        medicineWithReminders.medicine.color = Color.RED;
        medicinesWithReminders.add(medicineWithReminders);

        String result = jsonBackup.createBackup(5, medicinesWithReminders);

        assertNotNull(result);

        // @formatter:off
        assertEquals("""
{
  "version": 5,
  "medicinesWithReminders": [
    {
      "reminders": [
        {
          "timeInMinutes": 60,
          "daysBetweenReminders": 1,
          "instructions": "Take with water",
          "amount": "1"
        }
      ],
      "medicine": {
        "name": "Medicine A",
        "color": -65536,
        "useColor": true
      }
    }
  ]
}""", result);
        // @formatter:on

        List<MedicineWithReminders> parsedReminders = jsonBackup.parseBackup(result);
        assertNotNull(parsedReminders);
        compareListMedicineWithReminders(parsedReminders, medicinesWithReminders);
    }

    private void compareListMedicineWithReminders(List<MedicineWithReminders> actual, List<MedicineWithReminders> expected) {
        assertEquals(actual.size(), expected.size());
        for (int i = 0; i < actual.size(); i++) {
            compareMedicineWithReminders(actual.get(i), expected.get(i));
        }
    }

    private void compareMedicineWithReminders(MedicineWithReminders medicineWithReminders, MedicineWithReminders medicineWithReminders1) {
        assertEquals(medicineWithReminders.reminders.size(), medicineWithReminders1.reminders.size());
        for (int i = 0; i < medicineWithReminders.reminders.size(); i++) {
            compareReminder(medicineWithReminders.reminders.get(i), medicineWithReminders1.reminders.get(i));
        }
        assertEquals(medicineWithReminders.medicine.name, medicineWithReminders1.medicine.name);
        assertEquals(medicineWithReminders.medicine.useColor, medicineWithReminders1.medicine.useColor);
        assertEquals(medicineWithReminders.medicine.color, medicineWithReminders1.medicine.color);
    }

    private void compareReminder(Reminder reminder, Reminder reminder1) {
        assertEquals(reminder.timeInMinutes, reminder1.timeInMinutes);
        assertEquals(reminder.daysBetweenReminders, reminder1.daysBetweenReminders);
        assertEquals(reminder.instructions, reminder1.instructions);
        assertEquals(reminder.amount, reminder1.amount);
    }

    // iterates over the list of MedicineWithReminders and adds each one to the medicines array as a JSONObject
    @Test
    public void test_iterates_over_medicinesWithReminders_and_adds_to_medicines_array() {
        JSONBackup jsonBackup = new JSONBackup();
        List<MedicineWithReminders> medicinesWithReminders = new ArrayList<>();
        MedicineWithReminders medicineWithReminders1 = new MedicineWithReminders();
        Reminder reminder1 = new Reminder(0);
        reminder1.timeInMinutes = 60;
        reminder1.amount = "1";
        reminder1.daysBetweenReminders = 1;
        reminder1.instructions = "Take with water";
        medicineWithReminders1.reminders = Collections.singletonList(reminder1);
        medicineWithReminders1.medicine = new Medicine("Medicine A");
        medicineWithReminders1.medicine.useColor = true;
        medicineWithReminders1.medicine.color = Color.RED;
        medicinesWithReminders.add(medicineWithReminders1);

        MedicineWithReminders medicineWithReminders2 = new MedicineWithReminders();
        Reminder reminder2 = new Reminder(0);
        reminder2.timeInMinutes = 120;
        reminder2.amount = "2";
        reminder2.daysBetweenReminders = 2;
        reminder2.instructions = "Take after meal";
        medicineWithReminders2.reminders = new ArrayList<>() {{
            add(reminder1);
            add(reminder2);
        }};
        medicineWithReminders2.medicine = new Medicine("Medicine B");
        medicineWithReminders2.medicine.useColor = false;
        medicineWithReminders2.medicine.color = Color.BLUE;
        medicinesWithReminders.add(medicineWithReminders2);

        String result = jsonBackup.createBackup(4, medicinesWithReminders);

        assertNotNull(result);

        // @formatter:off
        assertEquals("""
{
  "version": 4,
  "medicinesWithReminders": [
    {
      "reminders": [
        {
          "timeInMinutes": 60,
          "daysBetweenReminders": 1,
          "instructions": "Take with water",
          "amount": "1"
        }
      ],
      "medicine": {
        "name": "Medicine A",
        "color": -65536,
        "useColor": true
      }
    },
    {
      "reminders": [
        {
          "timeInMinutes": 60,
          "daysBetweenReminders": 1,
          "instructions": "Take with water",
          "amount": "1"
        },
        {
          "timeInMinutes": 120,
          "daysBetweenReminders": 2,
          "instructions": "Take after meal",
          "amount": "2"
        }
      ],
      "medicine": {
        "name": "Medicine B",
        "color": -16776961,
        "useColor": false
      }
    }
  ]
}""", result);
        // @formatter:on

        List<MedicineWithReminders> parsedReminders = jsonBackup.parseBackup(result);
        assertNotNull(parsedReminders);
        compareListMedicineWithReminders(parsedReminders, medicinesWithReminders);
    }

    @Test
    public void test_parse_json_backup_missing_fields() {
        // Arrange
        JSONBackup jsonBackup = new JSONBackup();
        String validJsonBackup = "{\"version\": 1, \"medicinesWithReminders\": [{\"reminders\": [], \"medicine\": {}}]}";

        // Act
        List<MedicineWithReminders> result = jsonBackup.parseBackup(validJsonBackup);

        // Assert
        assertNull(result);
    }

    @Test
    public void test_parse_invalid_json_backup() {
        // Arrange
        JSONBackup jsonBackup = new JSONBackup();
        String invalidJsonBackup = "invalid_json";

        // Act
        List<MedicineWithReminders> result = jsonBackup.parseBackup(invalidJsonBackup);

        // Assert
        assertNull(result);
    }

    @Test
    public void test_parse_json_backup_with_missing_fields() {
        // Arrange
        JSONBackup jsonBackup = new JSONBackup();
        String jsonBackupWithMissingFields = "{\"version\": 1}";

        // Act
        List<MedicineWithReminders> result = jsonBackup.parseBackup(jsonBackupWithMissingFields);

        // Assert
        assertNull(result);
    }

}

