package com.futsch1.medtimer;


import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;

import android.graphics.Color;

import com.futsch1.medtimer.database.JSONMedicineBackup;
import com.futsch1.medtimer.database.Medicine;
import com.futsch1.medtimer.database.MedicineWithReminders;
import com.futsch1.medtimer.database.Reminder;

import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

class JSONMedicineBackupUnitTest {

    // Generated by CodiumAI

    // creates a backup object with a version number and a medicines array
    @Test
    void test_creates_backup_with_version_and_medicines_array() {
        JSONMedicineBackup jsonMedicineBackup = new JSONMedicineBackup();
        List<MedicineWithReminders> medicinesWithReminders = new ArrayList<>();
        MedicineWithReminders medicineWithReminders = new MedicineWithReminders();
        Reminder reminder = new Reminder(0);
        reminder.reminderId = 14;
        reminder.timeInMinutes = 60;
        reminder.amount = "1";
        reminder.consecutiveDays = 1;
        reminder.pauseDays = 0;
        reminder.cycleStartDay = 12;
        reminder.instructions = "Take with water";
        reminder.periodStart = 13;
        reminder.days.set(0, false);
        reminder.activeDaysOfMonth = 7;
        reminder.linkedReminderId = 15;
        medicineWithReminders.reminders = Collections.singletonList(reminder);
        medicineWithReminders.medicine = new Medicine("Medicine A");
        medicineWithReminders.medicine.useColor = true;
        medicineWithReminders.medicine.color = Color.RED;
        medicineWithReminders.medicine.iconId = 5;
        medicinesWithReminders.add(medicineWithReminders);

        String result = jsonMedicineBackup.createBackupAsString(5, medicinesWithReminders);

        assertNotNull(result);

        // @formatter:off
        assertEquals("""
{
  "version": 5,
  "list": [
    {
      "reminders": [
        {
          "reminderId": 14,
          "timeInMinutes": 60,
          "consecutiveDays": 1,
          "pauseDays": 0,
          "instructions": "Take with water",
          "cycleStartDay": 12,
          "amount": "1",
          "days": [
            false,
            true,
            true,
            true,
            true,
            true,
            true
          ],
          "active": true,
          "periodStart": 13,
          "periodEnd": 0,
          "activeDaysOfMonth": 7,
          "linkedReminderId": 15,
          "intervalStart": 0,
          "intervalStartsFromProcessed": false
        }
      ],
      "medicine": {
        "name": "Medicine A",
        "color": -65536,
        "useColor": true,
        "notificationImportance": 3,
        "iconId": 5
      }
    }
  ]
}""", result);
        // @formatter:on

        List<MedicineWithReminders> parsedReminders = jsonMedicineBackup.parseBackup(result);
        assertNotNull(parsedReminders);
        compareListMedicineWithReminders(parsedReminders, medicinesWithReminders);
    }

    private void compareListMedicineWithReminders(List<MedicineWithReminders> actual, List<MedicineWithReminders> expected) {
        assertEquals(expected.size(), actual.size());
        for (int i = 0; i < actual.size(); i++) {
            compareMedicineWithReminders(actual.get(i), expected.get(i));
        }
    }

    private void compareMedicineWithReminders(MedicineWithReminders medicineWithReminders, MedicineWithReminders medicineWithReminders1) {
        assertEquals(medicineWithReminders.reminders.size(), medicineWithReminders1.reminders.size());
        for (int i = 0; i < medicineWithReminders.reminders.size(); i++) {
            compareReminder(medicineWithReminders.reminders.get(i), medicineWithReminders1.reminders.get(i));
        }
        assertEquals(medicineWithReminders.medicine.name, medicineWithReminders1.medicine.name);
        assertEquals(medicineWithReminders.medicine.useColor, medicineWithReminders1.medicine.useColor);
        assertEquals(medicineWithReminders.medicine.color, medicineWithReminders1.medicine.color);
    }

    private void compareReminder(Reminder reminder, Reminder reminder1) {
        assertEquals(reminder.timeInMinutes, reminder1.timeInMinutes);
        assertEquals(reminder.consecutiveDays, reminder1.consecutiveDays);
        assertEquals(reminder.instructions, reminder1.instructions);
        assertEquals(reminder.amount, reminder1.amount);
    }

    // iterates over the list of MedicineWithReminders and adds each one to the medicines array as a JSONObject
    @Test
    void test_iterates_over_medicinesWithReminders_and_adds_to_medicines_array() {
        JSONMedicineBackup jsonMedicineBackup = new JSONMedicineBackup();
        List<MedicineWithReminders> medicinesWithReminders = new ArrayList<>();
        MedicineWithReminders medicineWithReminders1 = new MedicineWithReminders();
        Reminder reminder1 = new Reminder(0);
        reminder1.reminderId = 1;
        reminder1.timeInMinutes = 60;
        reminder1.amount = "1";
        reminder1.consecutiveDays = 1;
        reminder1.pauseDays = 0;
        reminder1.cycleStartDay = 1234;
        reminder1.instructions = "Take with water";
        reminder1.activeDaysOfMonth = 0xFFFF_FFFF;
        medicineWithReminders1.reminders = Collections.singletonList(reminder1);
        medicineWithReminders1.medicine = new Medicine("Medicine A");
        medicineWithReminders1.medicine.useColor = true;
        medicineWithReminders1.medicine.color = Color.RED;
        medicineWithReminders1.medicine.notificationImportance = 4;
        medicinesWithReminders.add(medicineWithReminders1);

        MedicineWithReminders medicineWithReminders2 = new MedicineWithReminders();
        Reminder reminder2 = new Reminder(0);
        reminder2.reminderId = 2;
        reminder2.timeInMinutes = 120;
        reminder2.amount = "2";
        reminder2.consecutiveDays = 2;
        reminder2.pauseDays = 1;
        reminder2.cycleStartDay = 4567;
        reminder2.instructions = "Take after meal";
        reminder2.days.set(6, false);
        reminder2.activeDaysOfMonth = 255;
        reminder2.linkedReminderId = 234;
        reminder2.intervalStart = 256;
        reminder2.intervalStartsFromProcessed = true;
        medicineWithReminders2.reminders = new ArrayList<>() {{
            add(reminder1);
            add(reminder2);
        }};
        medicineWithReminders2.medicine = new Medicine("Medicine B");
        medicineWithReminders2.medicine.useColor = false;
        medicineWithReminders2.medicine.color = Color.BLUE;
        medicineWithReminders2.medicine.notificationImportance = 5;
        medicineWithReminders2.medicine.iconId = 7;
        medicinesWithReminders.add(medicineWithReminders2);

        String result = jsonMedicineBackup.createBackupAsString(4, medicinesWithReminders);

        assertNotNull(result);

        // @formatter:off
        assertEquals("""
{
  "version": 4,
  "list": [
    {
      "reminders": [
        {
          "reminderId": 1,
          "timeInMinutes": 60,
          "consecutiveDays": 1,
          "pauseDays": 0,
          "instructions": "Take with water",
          "cycleStartDay": 1234,
          "amount": "1",
          "days": [
            true,
            true,
            true,
            true,
            true,
            true,
            true
          ],
          "active": true,
          "periodStart": 0,
          "periodEnd": 0,
          "activeDaysOfMonth": -1,
          "linkedReminderId": 0,
          "intervalStart": 0,
          "intervalStartsFromProcessed": false
        }
      ],
      "medicine": {
        "name": "Medicine A",
        "color": -65536,
        "useColor": true,
        "notificationImportance": 4,
        "iconId": 0
      }
    },
    {
      "reminders": [
        {
          "reminderId": 1,
          "timeInMinutes": 60,
          "consecutiveDays": 1,
          "pauseDays": 0,
          "instructions": "Take with water",
          "cycleStartDay": 1234,
          "amount": "1",
          "days": [
            true,
            true,
            true,
            true,
            true,
            true,
            true
          ],
          "active": true,
          "periodStart": 0,
          "periodEnd": 0,
          "activeDaysOfMonth": -1,
          "linkedReminderId": 0,
          "intervalStart": 0,
          "intervalStartsFromProcessed": false
        },
        {
          "reminderId": 2,
          "timeInMinutes": 120,
          "consecutiveDays": 2,
          "pauseDays": 1,
          "instructions": "Take after meal",
          "cycleStartDay": 4567,
          "amount": "2",
          "days": [
            true,
            true,
            true,
            true,
            true,
            true,
            false
          ],
          "active": true,
          "periodStart": 0,
          "periodEnd": 0,
          "activeDaysOfMonth": 255,
          "linkedReminderId": 234,
          "intervalStart": 256,
          "intervalStartsFromProcessed": true
        }
      ],
      "medicine": {
        "name": "Medicine B",
        "color": -16776961,
        "useColor": false,
        "notificationImportance": 5,
        "iconId": 7
      }
    }
  ]
}""", result);
        // @formatter:on

        List<MedicineWithReminders> parsedReminders = jsonMedicineBackup.parseBackup(result);
        assertNotNull(parsedReminders);
        compareListMedicineWithReminders(parsedReminders, medicinesWithReminders);
    }

    @Test
    void test_parse_json_backup_missing_fields() {
        // Arrange
        JSONMedicineBackup jsonMedicineBackup = new JSONMedicineBackup();
        String validJsonBackup = "{\"version\": 1, \"medicinesWithReminders\": [{\"reminders\": [], \"medicine\": {}}]}";

        // Act
        List<MedicineWithReminders> result = jsonMedicineBackup.parseBackup(validJsonBackup);

        // Assert
        assertNull(result);
    }

    @Test
    void test_parse_invalid_json_backup() {
        // Arrange
        JSONMedicineBackup jsonMedicineBackup = new JSONMedicineBackup();
        String invalidJsonBackup = "invalid_json";

        // Act
        List<MedicineWithReminders> result = jsonMedicineBackup.parseBackup(invalidJsonBackup);

        // Assert
        assertNull(result);
    }

    @Test
    void test_parse_json_backup_with_missing_fields() {
        // Arrange
        JSONMedicineBackup jsonMedicineBackup = new JSONMedicineBackup();
        String jsonBackupWithMissingFields = "{\"version\": 1}";

        // Act
        List<MedicineWithReminders> result = jsonMedicineBackup.parseBackup(jsonBackupWithMissingFields);

        // Assert
        assertNull(result);
    }

}

